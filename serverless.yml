service: serverless-workshop
frameworkVersion: '2'

plugins:
  - serverless-offline

custom:
  tableName: books-${self:provider.stage}
  tableKey: bookId

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-2
  stage: ${opt:stage, 'dev'}
  tags: 
    project-name: serverless-workshop 
  environment:
    TABLE_NAME: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::GetAtt:
          - BooksDynamoDB
          - Arn

functions:
  get-book:
    handler: functions/get-book.handler
    events:
      - httpApi:
          method: GET
          path: /books
  add-book:
    handler: functions/add-book.handler
    events:
      - httpApi:
          method: POST
          path: /books
  update-book:
    handler: functions/update-book.handler
    events:
      - httpApi:
          method: PUT
          path: /books/{params}
  delete-book:
    handler: functions/delete-book.handler
    events:
      - httpApi:
          method: DELETE
          path: /books/{params}

resources:
  - ${file(resources/dynamoDb.yml)}

package:
  exclude:
    - resources/**