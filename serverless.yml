service: serverless-workshop
frameworkVersion: '2'

plugins:
  - serverless-offline
  - serverless-iam-roles-per-function

custom:
  tableName: books-${self:provider.stage}
  tableKey: bookId

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-2
  stage: ${opt:stage, 'dev'}
  tags: 
    project-name: serverless-workshop 
  environment:
    TABLE_NAME: ${self:custom.tableName}
    NODE_PATH: "./:/opt/node_modules"

functions:
  get-book:
    handler: functions/get-book.handler
    events:
      - httpApi:
          method: GET
          path: /books
    package:
      include:
        - functions/get-book.js
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
        Resource:
          Fn::GetAtt:
            - BooksDynamoDB
            - Arn
    layers:
      - ${cf:layers-${self:provider.stage}.ExpressLayerArn}

  add-book:
    handler: functions/add-book.handler
    events:
      - httpApi:
          method: POST
          path: /books
    package:
      include:
        - functions/add-book.js
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource:
          Fn::GetAtt:
            - BooksDynamoDB
            - Arn
    layers:
      - ${cf:layers-${self:provider.stage}.ExpressLayerArn}
      - ${cf:layers-${self:provider.stage}.MomentLayerArn}

  update-book:
    handler: functions/update-book.handler
    events:
      - httpApi:
          method: PUT
          path: /books/{params}
    package:
      include:
        - functions/update-book.js
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource:
          Fn::GetAtt:
            - BooksDynamoDB
            - Arn
    layers:
      - ${cf:layers-${self:provider.stage}.ExpressLayerArn}

  delete-book:
    handler: functions/delete-book.handler
    events:
      - httpApi:
          method: DELETE
          path: /books/{params}
    package:
      include:
        - functions/delete-book.js
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource:
          Fn::GetAtt:
            - BooksDynamoDB
            - Arn
    layers:
      - ${cf:layers-${self:provider.stage}.ExpressLayerArn}

resources:
  - ${file(resources/dynamoDb.yml)}

package:
  individually: true
  exclude:
    - "functions/*"
    - "resources/*"
    - "layers/**"